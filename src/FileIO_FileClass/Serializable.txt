/*
 * ObjectInput,OutputStream 사용법.
 * 
 * * 객체 직렬화.
 * -객체를 파일에 저장하거나 네트워크로 전송하기 위해서는 객체를 스트림으로 만드는 작업이 필요하다.=>직렬화
 * -객체의 멤버변수를 바이트 단위로 직렬화 시켜야 한다.
 * -해당 객체가 가지고 있는 구성요소를 스트림으로 만드는 것.
 * 
 * -<해당 객체가 가지고 있는 모든 구성요소가 스티림으로 만들어 질까??>
 *  =>NO! 
 *  1.생성자, 메소드는 직렬화 대상이 되지 않는다.
 *  2.오로지 그 객체가 해당하는 class의 필드(멤버변수) 만 직렬화 대상이다.
 *  3.이 와중에 static으로 선언된 필드(정적 필드)는 직렬화 대상에서 제외된다.
 *  4.인스턴스 필드 중에 직렬화를 제외하고 싶으면 'transient'키워드 사용한다.
 *  
 *  -(static)정적 필드, transient키워드가 붙은 필드 => 직렬화 대상 아님.
 *  -직렬화 가능 타입 : 기본 자료형 타입의 필드, 직렬화 가능 클래스 타입의 필드.
 *  ex) 디폴트 직렬화 메카니즘.
 *    
 *    public class KO implements Serializable {
 *        
 *        String name;
 *        int age;
 *        Object attachment;    //직렬화 불가능. Object class가 Serializable을 구현하지 않기 때문.
 *    }
 *  
 *  
 * -직렬화 : 객체 -> 스트림(ObjectOutputStream의 writeObject())
 * -역직렬화 : 이미 입력된 스티림 으로부터 다시 객체를 만듬(ObjectInputStreamd의 readObject())
 * -직렬화 가능  class : 직렬화, 역직렬화 모두 가능하다.
 * 
 *  <<객체를 읽고 쓰는 class>>
 *  객체를 파일에 읽고 쓰는 class : ObjectInput,OutputStream class.
 *  
 *  직렬화 : 객체를 스트림으로 만드는 것.(직렬화 가능 객체만 가능).
 *  직렬화 가능 객체 : 객체를 생성한 class가 serializable 인터페이스를 구현한 class.
 *  
 *  ObjectOutputStream : 객체를 스트림으로 만든 후 출력하는 기능의 class. 혼자 못씀. FileOutputStream과 같이 써야되
 *                       바이트 단위이다.(문자단위 X);
 *                       test.txt에 경로 지정하면 이 파일에 어떠한 객체가 저장되어 있다.
 *                       
 *                       writeObject(객체);
 *                       이 객체를 읽어 오고 싶다.
 *                 
 *  ObjectInputStream : 파일에 저장된 객체를 읽어올때 쓴다.
 *                      스트림 형태로 읽어들인 객체를 프로그램에서 사용할 수 있는 객체로 만드는 기능의 class.
 *                      FileInputStream과 같이 쓴다.
 *                     
 *                      readObject();
 *                      -파일에 저장된 객체를 읽어 온다.
 *                      -타입이 Object형이다.
 *                      -사용하고자 하는 해당 class형으로 명시적 형변환을 해줘야 이 객체를 사용할 수 있다.
 

         직렬화 메소드 , 역직렬화 메소드를 '직렬화 가능 class'에 작성.(디폴트 직렬화 메커니즘과 비교)
         => 원하는 data만 직렬화 할 수 있다.
         디폴트 직렬화 메커니즘을 많이 사용하면 의미 없는 데이터가 많은 공간을 차지 하게 되기때문.
         
         //직렬화 메소드
         private void writeObject(ObjectOutputStream out) throws Exception {
                     //원하는 data만 직렬화 시키는 코드//
         }
         
         //역직렬화 메소드
         private void readObject(ObjectInputStream in) throws Exception {
                    //스티림을 읽어서 역직렬화 시키는 코드//
         }
         
         역직렬화 시 직렬화 가능 class의 생성자는 호출되지 않는다.
         
    * 다른 class를 상속받는 직렬화 가능 class.
    
    ex)
    
    //Super class
    class GoodsInfo() {
        
        String code;
        String name;
        int price;
        
        GoodsInfo(String code, String name, int price) {
           this.code = code;
           this.name = name;
           this.price = price;
        }
    }
    
    //Sub-class
    class BooksInfo extends GoodsInfo() implements Serializable {
         
         String writer;
         int page;
         
         BooksInfo(String code, String name, int price, String writer, int page) {
             
             super(code, name, price);
             this.writer = writer;
             this.page = page;
         }
         
         //Super class의 필드 직렬화 시켜야한다.
         private void writeObject(ObjectOutputStream os) throws Exception {
               // superclass의 필드 직렬화  + 이 class의 필드 직렬화
         }
         
         //Super class의 필드 역직렬화 시켜야한다.
         private void readObject(ObjectInputStream ois) throws Exception {
                //superclass의 필드 역직렬화  + 이 class의 필드 역직렬화
         
         }
    }
    
          상속 관계일때 직렬화 메커니즘은 일반 관계일때의 직렬화 방식과 동일하게 작동한다.
          하지만 역직렬화 시 생성자 예외가 발생하게 된다.
          
          자바에서 역직렬화 메커니즘.
    -객체가 역직렬화 될때 직렬화 가능 class의 생성자는 호출되지 않지만..
           직렬화가 불가능한 가장 가까운 Super class의 기본 생성자가 자동 호출된다.
     =>해당 Super class에 기본 생성자 작성해야 한다.
    
    defaultWrite,ReadObject() : 직렬화 가능 class의 자신의 필드를 한번에 직렬화, 역직렬화 시키는 메소드.
           
 */
